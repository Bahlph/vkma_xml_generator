<?xml version="1.0"?>
<registry>
	<comment>
Copyright (c) 2021 Cvelth (cvelth.mail@gmail.com)
SPDX-License-Identifier: Unlicense.

DO NOT MODIFY MANUALLY!
This file was generated using [generator](https://github.com/Cvelth/vma_xml_generator).
Generated files are licensed under [The Unlicense](https://unlicense.org).
The generator itself is licensed under [MIT License](https://www.mit.edu/~amini/LICENSE.md).</comment>
	<comment>
This file was generated from xml 'doxygen' documentation for [vk_mem_alloc.h (VulkanMemoryAllocator)](https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/src/vk_mem_alloc.h) header.
It is intended to be used as [vulkan-hpp](https://github.com/KhronosGroup/Vulkan-Hpp) generator input.
The goal is to generate a [vulkan.hpp](https://github.com/KhronosGroup/Vulkan-Hpp/blob/master/vulkan/vulkan.hpp) compatible header - a better c++ interface for VulkanMemoryAllocator.</comment>
	<platforms comment="empty">
		<platform name="does_not_matter" protect="VMA_DOES_NOT_MATTER" comment="Why am I even required to specify this?" />
	</platforms>
	<tags comment="empty">
		<tag name="WC" author="Who cares?" contact="@cvelth" />
	</tags>
	<types comment="VMA type definitions">
		<type name="vma" category="include">#include "vk_mem_alloc.h"</type>
		<type name="uint32_t" />
		<type category="bitmask" requires="VkmaPoolCreateFlagBits">typedef <type>VkFlags</type> <name>VkmaPoolCreateFlags</name>;</type>
		<type name="VkDeviceSize" />
		<type name="size_t" />
		<type name="float" />
		<type category="struct" name="VkmaPoolCreateInfo">
			<member><type>uint32_t</type> <name>memoryTypeIndex</name>
			</member>
			<member><type>VkmaPoolCreateFlags</type> <name>flags</name>
			</member>
			<member><type>VkDeviceSize</type> <name>blockSize</name>
			</member>
			<member><type>size_t</type> <name>minBlockCount</name>
			</member>
			<member><type>size_t</type> <name>maxBlockCount</name>
			</member>
			<member><type>uint32_t</type> <name>frameInUseCount</name>
			</member>
			<member><type>float</type> <name>priority</name>
			</member>
		</type>
		<type name="VkmaMemoryUsage" category="enum" />
		<type category="bitmask" requires="VkmaAllocationCreateFlagBits">typedef <type>VkFlags</type> <name>VkmaAllocationCreateFlags</name>;</type>
		<type name="VkMemoryPropertyFlags" />
		<type category="handle" parent="VkmaAllocator" objtypeenum="VKMA_POOL">
			<type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkmaPool</name>)</type>
		<type category="struct" name="VkmaAllocationCreateInfo">
			<member><type>VkmaAllocationCreateFlags</type> <name>flags</name>
			</member>
			<member><type>VkmaMemoryUsage</type> <name>usage</name>
			</member>
			<member><type>VkMemoryPropertyFlags</type> <name>requiredFlags</name>
			</member>
			<member><type>VkMemoryPropertyFlags</type> <name>preferredFlags</name>
			</member>
			<member><type>uint32_t</type> <name>memoryTypeBits</name>
			</member>
			<member><type>VkmaPool</type> <name>pool</name>
			</member>
			<member><type>void</type> * <name>pUserData</name>
			</member>
			<member><type>float</type> <name>priority</name>
			</member>
		</type>
		<type category="bitmask" requires="VkmaPoolCreateFlagBits">typedef <type>VkFlags</type> <name>VkmaPoolCreateFlags</name>;</type>
		<type category="bitmask" requires="VkmaAllocationCreateFlagBits">typedef <type>VkFlags</type> <name>VkmaAllocationCreateFlags</name>;</type>
		<type category="funcpointer">typedef void(*<name>PFN_vkmaAllocateDeviceMemoryFunction</name>)(<type>VkmaAllocator</type> allocator, <type>uint32_t</type> memoryType, <type>VkDeviceMemory</type> memory, <type>VkDeviceSize</type> size, <type>void</type> *pUserData);</type>
		<type category="funcpointer">typedef void(*<name>PFN_vkmaFreeDeviceMemoryFunction</name>)(<type>VkmaAllocator</type> allocator, <type>uint32_t</type> memoryType, <type>VkDeviceMemory</type> memory, <type>VkDeviceSize</type> size, <type>void</type> *pUserData);</type>
		<type category="struct" name="VkmaDeviceMemoryCallbacks">
			<member><type>PFN_vkmaAllocateDeviceMemoryFunction</type> <name>pfnAllocate</name>
			</member>
			<member><type>PFN_vkmaFreeDeviceMemoryFunction</type> <name>pfnFree</name>
			</member>
			<member><type>void</type> * <name>pUserData</name>
			</member>
		</type>
		<type category="bitmask" requires="VkmaAllocatorCreateFlagBits">typedef <type>VkFlags</type> <name>VkmaAllocatorCreateFlags</name>;</type>
		<type category="basetype">
			<type>VK_DEFINE_HANDLE</type>(<name>VkPhysicalDevice</name>)</type>
		<type category="basetype">
			<type>VK_DEFINE_HANDLE</type>(<name>VkDevice</name>)</type>
		<type category="basetype">struct <name>VkAllocationCallbacks</name>;</type>
		<type category="struct" name="VkmaVulkanFunctions">
			<member><type>PFN_vkGetPhysicalDeviceProperties</type> <name>vkGetPhysicalDeviceProperties</name>
			</member>
			<member><type>PFN_vkGetPhysicalDeviceMemoryProperties</type> <name>vkGetPhysicalDeviceMemoryProperties</name>
			</member>
			<member><type>PFN_vkAllocateMemory</type> <name>vkAllocateMemory</name>
			</member>
			<member><type>PFN_vkFreeMemory</type> <name>vkFreeMemory</name>
			</member>
			<member><type>PFN_vkMapMemory</type> <name>vkMapMemory</name>
			</member>
			<member><type>PFN_vkUnmapMemory</type> <name>vkUnmapMemory</name>
			</member>
			<member><type>PFN_vkFlushMappedMemoryRanges</type> <name>vkFlushMappedMemoryRanges</name>
			</member>
			<member><type>PFN_vkInvalidateMappedMemoryRanges</type> <name>vkInvalidateMappedMemoryRanges</name>
			</member>
			<member><type>PFN_vkBindBufferMemory</type> <name>vkBindBufferMemory</name>
			</member>
			<member><type>PFN_vkBindImageMemory</type> <name>vkBindImageMemory</name>
			</member>
			<member><type>PFN_vkGetBufferMemoryRequirements</type> <name>vkGetBufferMemoryRequirements</name>
			</member>
			<member><type>PFN_vkGetImageMemoryRequirements</type> <name>vkGetImageMemoryRequirements</name>
			</member>
			<member><type>PFN_vkCreateBuffer</type> <name>vkCreateBuffer</name>
			</member>
			<member><type>PFN_vkDestroyBuffer</type> <name>vkDestroyBuffer</name>
			</member>
			<member><type>PFN_vkCreateImage</type> <name>vkCreateImage</name>
			</member>
			<member><type>PFN_vkDestroyImage</type> <name>vkDestroyImage</name>
			</member>
			<member><type>PFN_vkCmdCopyBuffer</type> <name>vkCmdCopyBuffer</name>
			</member>
		</type>
		<type category="bitmask" requires="VkmaRecordFlagBits">typedef <type>VkFlags</type> <name>VkmaRecordFlags</name>;</type>
		<type name="char" />
		<type category="struct" name="VkmaRecordSettings">
			<member><type>VkmaRecordFlags</type> <name>flags</name>
			</member>
			<member>const <type>char</type> * <name>pFilePath</name>
			</member>
		</type>
		<type category="basetype">
			<type>VK_DEFINE_HANDLE</type>(<name>VkInstance</name>)</type>
		<type category="struct" name="VkmaAllocatorCreateInfo">
			<member><type>VkmaAllocatorCreateFlags</type> <name>flags</name>
			</member>
			<member><type>VkPhysicalDevice</type> <name>physicalDevice</name>
			</member>
			<member><type>VkDevice</type> <name>device</name>
			</member>
			<member><type>VkDeviceSize</type> <name>preferredLargeHeapBlockSize</name>
			</member>
			<member>const <type>VkAllocationCallbacks</type> * <name>pAllocationCallbacks</name>
			</member>
			<member>const <type>VkmaDeviceMemoryCallbacks</type> * <name>pDeviceMemoryCallbacks</name>
			</member>
			<member><type>uint32_t</type> <name>frameInUseCount</name>
			</member>
			<member>const <type>VkDeviceSize</type> * <name>pHeapSizeLimit</name>
			</member>
			<member>const <type>VkmaVulkanFunctions</type> * <name>pVulkanFunctions</name>
			</member>
			<member>const <type>VkmaRecordSettings</type> * <name>pRecordSettings</name>
			</member>
			<member><type>VkInstance</type> <name>instance</name>
			</member>
			<member><type>uint32_t</type> <name>vulkanApiVersion</name>
			</member>
		</type>
		<type category="bitmask" requires="VkmaAllocatorCreateFlagBits">typedef <type>VkFlags</type> <name>VkmaAllocatorCreateFlags</name>;</type>
		<type category="struct" name="VkmaBudget">
			<member><type>VkDeviceSize</type> <name>blockBytes</name>
			</member>
			<member><type>VkDeviceSize</type> <name>allocationBytes</name>
			</member>
			<member><type>VkDeviceSize</type> <name>usage</name>
			</member>
			<member><type>VkDeviceSize</type> <name>budget</name>
			</member>
		</type>
		<type category="bitmask" requires="VkmaRecordFlagBits">typedef <type>VkFlags</type> <name>VkmaRecordFlags</name>;</type>
		<type name="VkmaDefragmentationFlagBits" category="enum" />
		<type category="bitmask" requires="VkmaDefragmentationFlagBits">typedef <type>VkFlags</type> <name>VkmaDefragmentationFlags</name>;</type>
		<type category="handle" parent="VkmaAllocator" objtypeenum="VKMA_ALLOCATION">
			<type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkmaAllocation</name>)</type>
		<type name="VkBool32" />
		<type category="basetype">
			<type>VK_DEFINE_HANDLE</type>(<name>VkCommandBuffer</name>)</type>
		<type category="struct" name="VkmaDefragmentationInfo2">
			<member><type>VkmaDefragmentationFlags</type> <name>flags</name>
			</member>
			<member><type>uint32_t</type> <name>allocationCount</name>
			</member>
			<member>const <type>VkmaAllocation</type> * <name>pAllocations</name>
			</member>
			<member><type>VkBool32</type> * <name>pAllocationsChanged</name>
			</member>
			<member><type>uint32_t</type> <name>poolCount</name>
			</member>
			<member>const <type>VkmaPool</type> * <name>pPools</name>
			</member>
			<member><type>VkDeviceSize</type> <name>maxCpuBytesToMove</name>
			</member>
			<member><type>uint32_t</type> <name>maxCpuAllocationsToMove</name>
			</member>
			<member><type>VkDeviceSize</type> <name>maxGpuBytesToMove</name>
			</member>
			<member><type>uint32_t</type> <name>maxGpuAllocationsToMove</name>
			</member>
			<member><type>VkCommandBuffer</type> <name>commandBuffer</name>
			</member>
		</type>
		<type category="bitmask" requires="VkmaDefragmentationFlagBits">typedef <type>VkFlags</type> <name>VkmaDefragmentationFlags</name>;</type>
		<type category="basetype">
			<type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkDeviceMemory</name>)</type>
		<type category="struct" name="VkmaAllocationInfo">
			<member><type>uint32_t</type> <name>memoryType</name>
			</member>
			<member><type>VkDeviceMemory</type> <name>deviceMemory</name>
			</member>
			<member><type>VkDeviceSize</type> <name>offset</name>
			</member>
			<member><type>VkDeviceSize</type> <name>size</name>
			</member>
			<member><type>void</type> * <name>pMappedData</name>
			</member>
			<member><type>void</type> * <name>pUserData</name>
			</member>
		</type>
		<type category="struct" name="VkmaStatInfo">
			<member><type>uint32_t</type> <name>blockCount</name>
			</member>
			<member><type>uint32_t</type> <name>allocationCount</name>
			</member>
			<member><type>uint32_t</type> <name>unusedRangeCount</name>
			</member>
			<member><type>VkDeviceSize</type> <name>usedBytes</name>
			</member>
			<member><type>VkDeviceSize</type> <name>unusedBytes</name>
			</member>
			<member><type>VkDeviceSize</type> <name>allocationSizeMin</name>
			</member>
			<member><type>VkDeviceSize</type> <name>allocationSizeAvg</name>
			</member>
			<member><type>VkDeviceSize</type> <name>allocationSizeMax</name>
			</member>
			<member><type>VkDeviceSize</type> <name>unusedRangeSizeMin</name>
			</member>
			<member><type>VkDeviceSize</type> <name>unusedRangeSizeAvg</name>
			</member>
			<member><type>VkDeviceSize</type> <name>unusedRangeSizeMax</name>
			</member>
		</type>
		<type category="struct" name="VkmaStats">
			<member><type>VkmaStatInfo</type> <name>memoryType</name>
			</member>
			<member><type>VkmaStatInfo</type> <name>memoryHeap</name>
			</member>
			<member><type>VkmaStatInfo</type> <name>total</name>
			</member>
		</type>
		<type category="struct" name="VkmaDefragmentationStats">
			<member><type>VkDeviceSize</type> <name>bytesMoved</name>
			</member>
			<member><type>VkDeviceSize</type> <name>bytesFreed</name>
			</member>
			<member><type>uint32_t</type> <name>allocationsMoved</name>
			</member>
			<member><type>uint32_t</type> <name>deviceMemoryBlocksFreed</name>
			</member>
		</type>
		<type name="VkmaRecordFlagBits" category="enum" />
		<type name="VkmaResult" category="enum" />
		<type name="VkmaAllocatorCreateFlagBits" category="enum" />
		<type name="VkmaAllocationCreateFlagBits" category="enum" />
		<type name="VkmaPoolCreateFlagBits" category="enum" />
		<type category="struct" name="VkmaPoolStats">
			<member><type>VkDeviceSize</type> <name>size</name>
			</member>
			<member><type>VkDeviceSize</type> <name>unusedSize</name>
			</member>
			<member><type>size_t</type> <name>allocationCount</name>
			</member>
			<member><type>size_t</type> <name>unusedRangeCount</name>
			</member>
			<member><type>VkDeviceSize</type> <name>unusedRangeSizeMax</name>
			</member>
			<member><type>size_t</type> <name>blockCount</name>
			</member>
		</type>
		<type category="handle" objtypeenum="VKMA_ALLOCATOR">
			<type>VK_DEFINE_HANDLE</type>(<name>VkmaAllocator</name>)</type>
		<type category="handle" parent="VkmaAllocator" objtypeenum="VKMA_DEFRAGMENTATION_CONTEXT">
			<type>VK_DEFINE_NON_DISPATCHABLE_HANDLE</type>(<name>VkmaDefragmentationContext</name>)</type>
		<type category="handle" parent="VkmaAllocator" objtypeenum="VKMA_BUFFER">
			<type>VK_DEFINE_HANDLE</type>(<name>VkmaBuffer</name>)</type>
		<type category="handle" parent="VkmaAllocator" objtypeenum="VKMA_IMAGE">
			<type>VK_DEFINE_HANDLE</type>(<name>VkmaImage</name>)</type>
	</types>
	<enums name="VkmaMemoryUsage" type="enum">
		<enum value="0" name="VMA_MEMORY_USAGE_UNKNOWN" />
		<enum value="1" name="VMA_MEMORY_USAGE_GPU_ONLY" />
		<enum value="2" name="VMA_MEMORY_USAGE_CPU_ONLY" />
		<enum value="3" name="VMA_MEMORY_USAGE_CPU_TO_GPU" />
		<enum value="4" name="VMA_MEMORY_USAGE_GPU_TO_CPU" />
		<enum value="5" name="VMA_MEMORY_USAGE_CPU_COPY" />
		<enum value="6" name="VMA_MEMORY_USAGE_GPU_LAZILY_ALLOCATED" />
	</enums>
	<enums name="VkmaDefragmentationFlagBits" type="bitmask" />
	<enums name="VkmaRecordFlagBits" type="bitmask">
		<enum value="0x00000001" name="VMA_RECORD_FLUSH_AFTER_CALL_BIT" />
	</enums>
	<enums name="VkmaResult" type="enum">
		<enum value="0" name="VK_SUCCESS" />
		<enum value="1" name="VK_NOT_READY" />
		<enum value="2" name="VK_TIMEOUT" />
		<enum value="3" name="VK_EVENT_SET" />
		<enum value="4" name="VK_EVENT_RESET" />
		<enum value="5" name="VK_INCOMPLETE" />
		<enum value="-1" name="VK_ERROR_OUT_OF_HOST_MEMORY" />
		<enum value="-2" name="VK_ERROR_OUT_OF_DEVICE_MEMORY" />
		<enum value="-3" name="VK_ERROR_INITIALIZATION_FAILED" />
		<enum value="-4" name="VK_ERROR_DEVICE_LOST" />
		<enum value="-5" name="VK_ERROR_MEMORY_MAP_FAILED" />
		<enum value="-6" name="VK_ERROR_LAYER_NOT_PRESENT" />
		<enum value="-7" name="VK_ERROR_EXTENSION_NOT_PRESENT" />
		<enum value="-8" name="VK_ERROR_FEATURE_NOT_PRESENT" />
		<enum value="-9" name="VK_ERROR_INCOMPATIBLE_DRIVER" />
		<enum value="-10" name="VK_ERROR_TOO_MANY_OBJECTS" />
		<enum value="-11" name="VK_ERROR_FORMAT_NOT_SUPPORTED" />
		<enum value="-12" name="VK_ERROR_FRAGMENTED_POOL" />
		<enum value="-13" name="VK_ERROR_UNKNOWN" />
		<enum value="-1000069000" name="VK_ERROR_OUT_OF_POOL_MEMORY" />
		<enum value="-1000072003" name="VK_ERROR_INVALID_EXTERNAL_HANDLE" />
		<enum value="-1000161000" name="VK_ERROR_FRAGMENTATION" />
		<enum value="-1000257000" name="VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS" />
		<enum value="-1000000000" name="VK_ERROR_SURFACE_LOST_KHR" />
		<enum value="-1000000001" name="VK_ERROR_NATIVE_WINDOW_IN_USE_KHR" />
		<enum value="1000001003" name="VK_SUBOPTIMAL_KHR" />
		<enum value="-1000001004" name="VK_ERROR_OUT_OF_DATE_KHR" />
		<enum value="-1000003001" name="VK_ERROR_INCOMPATIBLE_DISPLAY_KHR" />
		<enum value="-1000011001" name="VK_ERROR_VALIDATION_FAILED_EXT" />
		<enum value="-1000012000" name="VK_ERROR_INVALID_SHADER_NV" />
		<enum value="-1000158000" name="VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT" />
		<enum value="-1000174001" name="VK_ERROR_NOT_PERMITTED_EXT" />
		<enum value="-1000255000" name="VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT" />
		<enum value="1000268000" name="VK_THREAD_IDLE_KHR" />
		<enum value="1000268001" name="VK_THREAD_DONE_KHR" />
		<enum value="1000268002" name="VK_OPERATION_DEFERRED_KHR" />
		<enum value="1000268003" name="VK_OPERATION_NOT_DEFERRED_KHR" />
		<enum value="1000297000" name="VK_PIPELINE_COMPILE_REQUIRED_EXT" />
		<enum value="VK_ERROR_OUT_OF_POOL_MEMORY" name="VK_ERROR_OUT_OF_POOL_MEMORY_KHR" />
		<enum value="VK_ERROR_INVALID_EXTERNAL_HANDLE" name="VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" />
		<enum value="VK_ERROR_FRAGMENTATION" name="VK_ERROR_FRAGMENTATION_EXT" />
		<enum value="VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS" name="VK_ERROR_INVALID_DEVICE_ADDRESS_EXT" />
		<enum value="VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS" name="VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR" />
		<enum value="VK_PIPELINE_COMPILE_REQUIRED_EXT" name="VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT" />
	</enums>
	<enums name="VkmaAllocatorCreateFlagBits" type="bitmask">
		<enum value="0x00000001" name="VMA_ALLOCATOR_CREATE_EXTERNALLY_SYNCHRONIZED_BIT" />
		<enum value="0x00000002" name="VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT" />
		<enum value="0x00000004" name="VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT" />
		<enum value="0x00000008" name="VMA_ALLOCATOR_CREATE_EXT_MEMORY_BUDGET_BIT" />
	</enums>
	<enums name="VkmaAllocationCreateFlagBits" type="bitmask">
		<enum value="0x00000001" name="VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT" />
		<enum value="0x00000002" name="VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT" />
		<enum value="0x00000004" name="VMA_ALLOCATION_CREATE_MAPPED_BIT" />
		<enum value="0x00000008" name="VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT" />
		<enum value="0x00000010" name="VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT" />
		<enum value="0x00000020" name="VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT" />
		<enum value="0x00000040" name="VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT" />
		<enum value="0x00000080" name="VMA_ALLOCATION_CREATE_DONT_BIND_BIT" />
		<enum value="0x00000100" name="VMA_ALLOCATION_CREATE_WITHIN_BUDGET_BIT" />
		<enum value="0x00010000" name="VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT" />
		<enum value="0x00020000" name="VMA_ALLOCATION_CREATE_STRATEGY_WORST_FIT_BIT" />
		<enum value="0x00040000" name="VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT" />
		<enum value="VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT" name="VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT" />
		<enum value="VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT" name="VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT" />
		<enum value="VMA_ALLOCATION_CREATE_STRATEGY_WORST_FIT_BIT" name="VMA_ALLOCATION_CREATE_STRATEGY_MIN_FRAGMENTATION_BIT" />
		<enum value="VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT | VMA_ALLOCATION_CREATE_STRATEGY_WORST_FIT_BIT | VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT" name="VMA_ALLOCATION_CREATE_STRATEGY_MASK" />
	</enums>
	<enums name="VkmaPoolCreateFlagBits" type="bitmask">
		<enum value="0x00000002" name="VMA_POOL_CREATE_IGNORE_BUFFER_IMAGE_GRANULARITY_BIT" />
		<enum value="0x00000004" name="VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT" />
		<enum value="0x00000008" name="VMA_POOL_CREATE_BUDDY_ALGORITHM_BIT" />
		<enum value="VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT | VMA_POOL_CREATE_BUDDY_ALGORITHM_BIT" name="VMA_POOL_CREATE_ALGORITHM_MASK" />
	</enums>
</registry>
